import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';
import { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { debounceTime, map, merge, Observable, Subject, switchMap, takeUntil } from 'rxjs';
import { fuseAnimations } from '@fuse/animations';
import { FuseConfirmationService } from '@fuse/services/confirmation';
import { RolPagination, Segmento, Dependence, Position, User } from 'app/modules/admin/segmentos/segmentos.types';
import { SegmentosService } from 'app/modules/admin/segmentos/segmentos.service';
import { PositionService } from '../../position/position.service';
import { DependenceService } from '../../dependence/dependence.service';
import { UsersService } from '../../users/users.service';
import { find } from 'lodash';

@Component({
    selector: 'segmentos-list',
    templateUrl: './segmentos.component.html',
    styles: [
        /* language=SCSS */
        `
            .inventory-grid {
                grid-template-columns: 48px auto 40px;

                @screen sm {
                    grid-template-columns: 48px auto 112px 72px;
                }

                @screen md {
                    grid-template-columns: 48px 112px auto 112px 72px;
                }

                @screen lg {
                    grid-template-columns: 48px 112px auto 112px 96px 96px 72px;
                }
            }
        `
    ],
    encapsulation: ViewEncapsulation.None,
    changeDetection: ChangeDetectionStrategy.OnPush,
    animations: fuseAnimations
})
export class SegmentosListComponent implements OnInit, AfterViewInit, OnDestroy {
    @ViewChild(MatPaginator) private _paginator: MatPaginator;
    @ViewChild(MatSort) private _sort: MatSort;
    // private _products: BehaviorSubject<Rol[] | null> = new BehaviorSubject(null);
    segmentos$: Observable<Segmento[]>;


    filteredDependence: Dependence[];
    filteredPosition: Position[];
    filteredUsers: User[];
    flashMessage: 'success' | 'error' | null = null;
    isLoading: boolean = false;
    pagination: RolPagination = {
        length: 0,
        size: 10,
        page: 1,
        lastPage: 0,
        startIndex: 0,
        endIndex: 0
    };
    searchInputControl: UntypedFormControl = new UntypedFormControl();
    selectedSegment: Segmento | null = null;

    selectedFormSegment: UntypedFormGroup;
    selectedSegmentoForm: UntypedFormGroup;
    dependence: Dependence[];
    position: Position[];
    segmentos: Segmento[];
    user: User[];
    tagsEditMode: boolean = false;
    newUser: boolean = false;
    titulo_btn = "Guardar";
    // vendors: InventoryVendor[];
    
    private _unsubscribeAll: Subject<any> = new Subject<any>();

    /**
     * Constructor
     */
    constructor(
        private _changeDetectorRef: ChangeDetectorRef,
        private _fuseConfirmationService: FuseConfirmationService,
        private _formBuilder: UntypedFormBuilder,
        private _segmentoService: SegmentosService,
        private _dependenceService: DependenceService,
        private _positionService: PositionService,
        private _usersService: UsersService

    ) {
    }

    



    // -----------------------------------------------------------------------------------------------------
    // @ Lifecycle hooks
    // -----------------------------------------------------------------------------------------------------

    /**
     * On init
     * Obtener Get Rol
     */
    ngOnInit(): void {
        this.segmentos$ = this._segmentoService.segments$;

        this._segmentoService.getSegments().subscribe(res => {
            console.log(res);

            this.pagination = {
                length: 13,
                size: 10,
                page: 1,
                lastPage: 10,
                startIndex: 1,
                endIndex: 2 - 1
            };
        });

        

        // Create the selected Rol form
        this.selectedFormSegment = this._formBuilder.group({
            id: [''],
            name: ['', [Validators.required]],
            dependence: [[]],
            position: [[]],
            reserved: [''],
            createdAt: [],
            price: [''],
            images: [[]],
            active: [false]
        });
        this.selectedSegmentoForm = this._formBuilder.group({
            name: ['', [Validators.required]],
            dependence: [[]],
            position: [[]],
            person: [[]]
        });

        console.log(this.selectedSegment)
        this._dependenceService.getDependenses()
            .subscribe((dependences: any) => {

                // Update the tags
                console.log(dependences.data);
                this.dependence = dependences.data;
                this.filteredDependence = dependences.data;



                // Mark for check
                this._changeDetectorRef.markForCheck();
            });


        this._positionService.getPositions()
            .subscribe((positions: any) => {
                console.log(positions.data);
                // Update the tags
                this.position = positions.data;
                this.filteredPosition = positions.data;



                // Mark for check
                this._changeDetectorRef.markForCheck();
            });

        this._usersService.getUsers()
            .subscribe((user: any) => {
                //console.log(user);
                // Update the tags
                this.user = user;
                this.filteredUsers = user.data;
                // console.log(this.filteredUsers);
                // console.log(this.filteredLevels, this.tags);

                // Mark for check
                this._changeDetectorRef.markForCheck();
            });


        this.segmentos$ = this._segmentoService.segments$;
        this.searchInputControl.valueChanges
            .pipe(
                takeUntil(this._unsubscribeAll),
                debounceTime(300),
                switchMap((query) => {
                    this.closeDetails();
                    this.isLoading = true;
                    return this._segmentoService.getSegments(0, 10, 'name', 'asc', query);
                }),
                map(() => {
                    this.isLoading = false;
                })
            )
            .subscribe();

    }

    /**
     * After view init
     */

    ngAfterViewInit(): void {

        if (this._sort && this._paginator) {
            // Set the initial sort
            this._sort.sort({
                id: 'name',
                start: 'asc',
                disableClear: true
            });

            // Mark for check
            this._changeDetectorRef.markForCheck();

            // If the user changes the sort order...
            this._sort.sortChange
                .pipe(takeUntil(this._unsubscribeAll))
                .subscribe(() => {
                    // Reset back to the first page
                    this._paginator.pageIndex = 0;

                    // Close the details
                    this.closeDetails();
                });


        }


    }

    /**
     * On destroy
     */
    ngOnDestroy(): void {
        // Unsubscribe from all subscriptions
        this._unsubscribeAll.next(null);
        this._unsubscribeAll.complete();
    }


    // -----------------------------------------------------------------------------------------------------
    // @ Public methods
    // -----------------------------------------------------------------------------------------------------

    /**
     * Toggle Rol details
     *
     * @param rolId de Rol
     */
    toggleDetails(segmentId: number): void {
        // If the product is already selected...
        this.newUser = true;
        this.titulo_btn = "Editar"
        if (this.selectedSegment && this.selectedSegment.id === segmentId) {
            // Close the details
            this.closeDetails();
            return;
        }
        console.log(segmentId);

        this._segmentoService.getIdSegments(segmentId)
            .subscribe(segmento => {
                console.log(segmento.data);
                this.selectedSegment = segmento.data;
                this.selectedSegmentoForm.patchValue(segmento.data);

                this._changeDetectorRef.markForCheck();

            });
    }

    /**
 * Close the details
 */
    closeDetails(): void {
        this.selectedSegment = null;
    }



    ///////////////////////////////////////////////////////CHECK CARGOS////////////////////////////////////////////////////


    filterTags(event): void {
        // Get the value
        const value = event.target.value.toLowerCase();

        // Filter the tags
    
        this.filteredDependence = this.dependence.filter(dependence => dependence.description.toLowerCase().includes(value));
        console.log(this.filteredDependence)
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    filterTagsPosition(event): void {
        // Get the value
        const value = event.target.value.toLowerCase();

        // Filter the tags
        this.filteredPosition = this.position.filter(position => position.description.toLowerCase().includes(value));
        console.log(this.filteredPosition)
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    filterTagsInputKeyDown(event): void {
        // Return if the pressed key is not 'Enter'
        if (event.key !== 'Enter') {
            return;
        }

        // If there is no tag available...

        // If there is a tag...
        const dependence = this.filteredDependence[0];
        const isTagApplied = this.selectedSegment.dependence.find(id => id === id);
        // console.log(this.selectedSegment.dependence)
        //return isTagApplied? true : false;

        // If the found tag is already applied to the product...
        if (isTagApplied) {
            // Remove the tag from the product
            this.removeTagFromProduct(dependence);
        }
        else {
            // Otherwise add the tag to the product
            this.addTagToProduct(dependence);
        }
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    filterTagsPositionInputKeyDown(event): void {
        // Return if the pressed key is not 'Enter'
        if (event.key !== 'Enter') {
            return;
        }

        // If there is no tag available...

        // If there is a tag...

        const position = this.filteredPosition[0];

     
        //const isTagAppliedPos = this.selectedSegment.position.find(id => id === id);

        // console.log(this.selectedSegment.dependence)
        //return isTagApplied? true : false;

        // If the found tag is already applied to the product...
        //if (isTagAppliedPos) {
            // Remove the tag from the product
          //  this.removeTagFromPosition(position);
        //}
        //else {
            // Otherwise add the tag to the product
          //  this.addTagToPosition(position);
        //}
    }
    //////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Add tag to the product
     *
     * 
     */
    addTagToProduct(dependence: Dependence): void {
        //console.log("Aqui dependemce", this.selectedSegment)
        // Add the tag
       console.log(this.selectedSegment)
        console.log(dependence)
   
    
        this.selectedSegment.dependence.unshift(dependence);

        // Update the selected product form
        console.log(this.selectedSegment.dependence)
        this.selectedSegmentoForm.get('dependence').patchValue(this.selectedSegment.dependence);

        // Mark for check
        this._changeDetectorRef.markForCheck();
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    addTagToPosition(position: Position): void {
       // console.log("Aqui", this.selectedSegment)
       console.log(this.selectedSegment)
       // this.selectedSegment.position= []
       // console.log(this.selectedSegment)
        console.log(position)
   
        this.selectedSegment.position.unshift(position);
        

        // Update the selected product form
        this.selectedSegmentoForm.get('position').patchValue(this.selectedSegment.position);

        // Mark for check
        this._changeDetectorRef.markForCheck();
    }


    /**
     * Remove tag from the product
     *
     * 
     */
    removeTagFromProduct(dependence: Dependence): void {
        // Remove the tag
        this.selectedSegment.dependence.splice(this.selectedSegment.dependence.findIndex(item => item === dependence.id), 1);

        // Update the selected product form
        this.selectedSegmentoForm.get('dependence').patchValue(this.selectedSegment.dependence);

        // Mark for check
        this._changeDetectorRef.markForCheck();
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    removeTagFromPosition(position: Position): void {
        // Remove the tag
        if (!this.selectedSegment.position) return
        this.selectedSegment.position.splice(this.selectedSegment.position.findIndex(item => item === position.id), 1);

        // Update the selected product form
        this.selectedSegmentoForm.get('position').patchValue(this.selectedSegment.position);

        // Mark for check
        this._changeDetectorRef.markForCheck();
    }
    /**
     * Toggle product tag
     *
     * 
     */
    toggleProductTag(tag: Dependence, change: MatCheckboxChange): void {
     //   console.log(tag, change)
        if (change.checked) {
            this.addTagToProduct(tag);
        }
        else {
            this.removeTagFromProduct(tag);
        }
    }
    //////////////////////////////////////////////////////////////////////////////////
    togglePositionTag(tags: Position, change: MatCheckboxChange): void {
       console.log(tags)
        if (change.checked) {
            this.addTagToPosition(tags);
        }
        else {
            this.removeTagFromPosition(tags);
        }
    }



    checkVerify(id:Dependence) {
        //console.log(this.selectedSegment.dependence)
        //console.log(this.selectedSegmentoForm.value)
        let findSelectedSegment = this.selectedSegment.dependence.find(l => l.id == id);
        return findSelectedSegment ? true : false;


    }


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    checkVerification(id) {
        if (!this.selectedSegment.position) return
        //console.log(this.selectedSegment.position)
        let findSelectedSegment = this.selectedSegment.position.find(id => id == id);
        return findSelectedSegment ? true : false;

    }


    //////////////////////////////////////////////////////////////////////////METODOS/////////////////////////////////////////////


    /**
     * Agregar Rol
     */
    addSegmento(): void {
        this.newUser = false;
        this._segmentoService.addSegmento().subscribe((newSegmento) => {
            this.selectedSegment = newSegmento;
            this.selectedSegmentoForm.patchValue(newSegmento);
            this._changeDetectorRef.markForCheck();
        })
        this.newUser = true;
        console.log(this.newUser)
    }

    /**
    * Crear Rol
    */

    createSegmento(): void {
        this.newUser = false
        if (this.selectedSegment.id) {
            let newSegment: Segmento = this.selectedSegmentoForm.value
            console.log(this.selectedSegment.id, newSegment)
            this._segmentoService.updateSegment(this.selectedSegment.id, newSegment)
                .subscribe((res) => {
                    console.log("actualizar")   ///mensaje que actualizo
                    console.log(res);    //RESPUESTA DE QUE LA PETICION FUE EXITOSA
                    this._segmentoService.getSegments().subscribe(res => {
                        this.showFlashMessage('success');


                        this.pagination = {
                            length: 13,
                            size: 10,
                            page: 1,
                            lastPage: 10,
                            startIndex: 1,
                            endIndex: 2 - 1
                        };
                    });

                })
            return

        }
        const { name } = this.selectedSegmentoForm.value
      //  console.log(this.selectedSegmentoForm.value)
        if (!name) return
        console.log(this.selectedSegmentoForm)
        return
            this._segmentoService.createSegmento(this.selectedSegmentoForm.value).subscribe((res) => {
                console.log(res)    ///TRAE CONSULTA DE SEGMENTOS

                this._segmentoService.getSegments().subscribe(res => {
                    console.log(res);

                    this.pagination = {
                        length: 13,
                        size: 10,
                        page: 1,
                        lastPage: 10,
                        startIndex: 1,
                        endIndex: 2 - 1
                    };
                });


            })


    }

    /**
    * Desabilitar Rol
    */


    deleteSegment(): void {
        const confirmation = this._fuseConfirmationService.open({
            title: '¿Esta seguro de eliminar este segmento?',
            message: 'Una vez eliminado no se podra volver a ver este segmento.',
            actions: {
                confirm: {
                    label: 'Eliminar'
                }
            }
        });
        confirmation.afterClosed().subscribe((result) => {

            // If the confirm button pressed...
            if (result === 'confirmed') {


                this._segmentoService.deleteSegment(this.selectedSegment.id)
                    .subscribe((res) => {

                        console.log(res);
                        this._segmentoService.getSegments().subscribe(res => {
                            console.log(res);

                            this.pagination = {
                                length: 13,
                                size: 10,
                                page: 1,
                                lastPage: 10,
                                startIndex: 1,
                                endIndex: 2 - 1
                            };
                        });

                    });
            }
        });


    }
    showFlashMessage(type: 'success' | 'error'): void {
        // Show the message
        this.flashMessage = type;

        // Mark for check
        this._changeDetectorRef.markForCheck();

        // Hide it after 3 seconds
        setTimeout(() => {

            this.flashMessage = null;

            // Mark for check
            this._changeDetectorRef.markForCheck();
        }, 3000);
    }
}

