  filterTags(event): void {
            // Get the value
            const value = event.target.value.toLowerCase();
    
            // Filter the tags
            this.filteredDependence = this.dependence.filter(dependence => dependence.description.toLowerCase().includes(value));
        }
    
        /**
         * Filter tags input key down event
         *
         * @param event
         */
        filterTagsInputKeyDown(event): void {
            // Return if the pressed key is not 'Enter'
            if (event.key !== 'Enter') {
                return;
            }
    
            // If there is no tag available...
    
            // If there is a tag...
            const dependence = this.filteredDependence[0];
            const isTagApplied = this.selectedSegment.dependence.find(id => id === dependence.id);
    
            // If the found tag is already applied to the product...
            if (isTagApplied) {
                // Remove the tag from the product
                this.removeTagFromProduct(dependence);
            }
            else {
                // Otherwise add the tag to the product
                this.addTagToProduct(dependence);
            }
        }
    
    
        /**
         * Add tag to the product
         *
         * 
         */
        addTagToProduct(dependence: Dependence): void {
            // Add the tag
            this.selectedSegment.dependence.unshift(dependence);
    
            // Update the selected product form
            this.selectedSegmentoForm.get('dependence').patchValue(this.selectedSegment.dependence);
    
            // Mark for check
            this._changeDetectorRef.markForCheck();
        }
    
        /**
         * Remove tag from the product
         *
         * 
         */
        removeTagFromProduct(dependence: Dependence): void {
            // Remove the tag
            this.selectedSegment.dependence.splice(this.selectedSegment.dependence.findIndex(item => item === dependence.id), 1);
    
            // Update the selected product form
            this.selectedSegmentoForm.get('dependence').patchValue(this.selectedSegment.dependence);
    
            // Mark for check
            this._changeDetectorRef.markForCheck();
        }
    
        /**
         * Toggle product tag
         *
         * 
         */
        toggleProductTag(tag: Dependence, change: MatCheckboxChange): void {
            console.log(tag, change)
            if (change.checked) {
                this.addTagToProduct(tag);
            }
            else {
                this.removeTagFromProduct(tag);
            }
        }
    
        checkVerify(id,position?:boolean) {
    
            const value=position?this.selectedSegment.position:this.selectedSegment.dependence
            if(!value) return
            let findSelectedSegment =value.find(d => d.id == id);
            return findSelectedSegment ? true : false;
    
        }


        ///////////////////////////////////////////////////////CHECK CARGOS////////////////////////////////////////////////////

        addTagToProducts(position: Position): void {
            // Add the tag

            if(this.selectedSegment.position) this.selectedSegment.position.unshift(position)
           
    
            // Update the selected product form
            this.selectedSegmentoForm.get('position').patchValue(this.selectedSegment.position);
    
            // Mark for check
            this._changeDetectorRef.markForCheck();
        }
    
        /**
         * Remove tag from the product
         *
         * 
         */
        removeTagFromProducts(position: Position): void {
            // Remove the tag
            this.selectedSegment.position.splice(this.selectedSegment.position.findIndex(item => item === position.id), 1);
    
            // Update the selected product form
            this.selectedSegmentoForm.get('position').patchValue(this.selectedSegment.position);
    
            // Mark for check
            this._changeDetectorRef.markForCheck();
        }
    
        /**
         * Toggle product tag
         *
         * 
         */
        toggleProductTags(tag: Position, change: MatCheckboxChange): void {
            console.log(tag, change)
            if (change.checked) {
                this.addTagToProducts(tag);
            }
            else {
                this.removeTagFromProducts(tag);
            }
        }
    
        checkVerification(id) {
            if(!this.selectedSegment.position)  return
        
            let findSelectedSegments = this.selectedSegment.position.find(p => p.id == id);
            return findSelectedSegments ? true : false;
    
        }


[color]="'primary'" [checked]="checkVerify(position.id,true)"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

filterTagsPosition(event): void {
        // Get the value
        const value = event.target.value.toLowerCase();

        // Filter the tags
        this.filteredPosition = this.position.filter(position => position.description.toLowerCase().includes(value));
    }
    filterTagsPositionInputKeyDown(event): void {
        // Return if the pressed key is not 'Enter'
        if (event.key !== 'Enter') {
            return;
        }

        // If there is no tag available...

        // If there is a tag...
        const position= this.filteredPosition[0];        
        const isTagAppliedPos = this.selectedSegment.position.find(id => id === id);
       // console.log(this.selectedSegment.dependence)
        //return isTagApplied? true : false;

        // If the found tag is already applied to the product...
        if (isTagAppliedPos) {
            // Remove the tag from the product
            this.removeTagFromPosition(position);
        }
        else {
            // Otherwise add the tag to the product
            this.addTagToPosition(position);
        }
    }

    
    
    addTagToPosition(position: Position): void {
        console.log("Aqui", this.selectedSegment)
        if(!this.selectedSegment.position) return
        this.selectedSegment.position.unshift(position); 

        // Update the selected product form
        this.selectedSegmentoForm.get('position').patchValue(this.selectedSegment.position);

        // Mark for check
        this._changeDetectorRef.markForCheck();
    }

    /**
     * Remove tag from the product
     *
     * 
     */
    removeTagFromPosition(position: Position): void {
        // Remove the tag
        if(!this.selectedSegment.position) return
        this.selectedSegment.position.splice(this.selectedSegment.position.findIndex(item => item === position.id), 1);

        // Update the selected product form
        this.selectedSegmentoForm.get('position').patchValue(this.selectedSegment.position);

        // Mark for check
        this._changeDetectorRef.markForCheck();
    }

    /**
     * Toggle product tag
     *
     * 
     */
    togglePositionTag(tags: Position, change: MatCheckboxChange): void {
        console.log(tags, change)
        if (change.checked) {
            this.addTagToPosition(tags);
        }
        else {
            this.removeTagFromPosition(tags);
        }
    }

    checkVerification(id) {
       if(!this.selectedSegment.position)return
       //console.log(this.selectedSegment.position)
       const  findSelectedSegments = this.selectedSegment.position.find(p => p.id == id);
       return findSelectedSegments? true : false;

   }






