roles. types.ts

export interface Rol{
    id:string,
    name:string,
    date:string,
    permissions:permission[]
}
export interface permission{
    id:string,
    name:string
}


/////////////////////////////////////////////////

toggleDetails(productId: number): void {
        // If the product is already selected...
        if (this.selectedProduct && this.selectedProduct.id === productId) {
            // Close the details
            this.closeDetails();
            return;
        }
        console.log(productId);

        this._rolService.getIdRols(productId)
            .subscribe(rol => {
                console.log(rol);
                this.selectedProduct = rol;
                this.selectedRoleForm.patchValue(rol);
            })

  this._rolService.getRols().subscribe(res => {
            // console.log(res);

            this.pagination = {
                length: 13,
                size: 10,
                page: 1,
                lastPage: 10,
                startIndex: 1,
                endIndex: 2 - 1
            };
        });

        // Get the product by id
        // this._rolService.getProductById(productId)
        //     .subscribe((product) => {
        //         console.log(product);

        //         // Set the selected product
        //         this.selectedProduct = product;

        //         // Fill the form
        //         this.selectedProductForm.patchValue(product);

        //         // Mark for check
        //         this._changeDetectorRef.markForCheck();
        //     });
    }

    /**
     * Close the details
     */
    closeDetails(): void {
        this.selectedProduct = null;
    }



  addRol(): Observable<Rol>
    {   const newRol = {
            id:0,
            name:'',
            log:{createdAt:new Date().toString()},
            level:[]
        }
        return this.products$.pipe(
           take(1),
           map(roles => {
            this._products.next([newRol, ...roles]);
            return newRol;
           })
        );
    }